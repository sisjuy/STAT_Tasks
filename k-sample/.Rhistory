rstandard(fit)  #package TSA
ts.plot(rstandard(fit), ylab="", main="standardized residuals")
fit_res = as.vector(rstandard(fit))
acf(fit_res)
pacf(fit_res)
fit <- fit3
library(TSA)
rstandard(fit)  #package TSA
ts.plot(rstandard(fit), ylab="", main="standardized residuals")
fit_res = as.vector(rstandard(fit))
acf(fit_res)
pacf(fit_res)
fit_res = fit$residuals
par(mfrow = c(1,2))
acf(fit_res)
pacf(fit_res)
ts.plot(rstandard(fit), ylab="", main="standardized residuals")
fit1
fit1
fit2
fit3
source("D:/大四下/Time series/hw2/time series hw2.R", echo=TRUE)
##3
#(a)
c = astsa::chicken
c
ts.plot(c)
par(mfrow = c(1,1))
ts.plot(c)
acf(c,100)
dc = diff(c)
ts.plot(dc)
acf(dc,100)
pacf(dc,100)
pacf(c,100)
par(mar=c(3,3,2,1), mgp=c(1.6,.6,0))
ts.plot(c)
acf(c,100)
pacf(c,100)
layout(matrix(c(1,1,2, 1,1,3), nc=2))
par(mar=c(3,3,2,1), mgp=c(1.6,.6,0))
ts.plot(c)
acf(c,100)
pacf(c,100)
dc = diff(c)
ts.plot(dc)
acf(dc,100)
pacf(dc,100)
sdc = diff(dc,12)
ts.plot(sdc)
acf(sdc,100)
pacf(sdc,100)
auto.arima(c)
fit1
fit2
fit3
fit4
fit3 <- arima(c, order=c(2,1,0), seasonal=list(order=c(1,0,0)))
fit4 <- arima(c, order=c(2,1,0), seasonal=list(order=c(0,0,1)))
fit3
fit4
fit2
fit1 <- arima(c, order=c(2,1,0), seasonal=list(order=c(0,0,0)))
fit2 <- arima(c, order=c(1,1,0), seasonal=list(order=c(0,0,0)))
fit1
fit2
fit3 <- arima(c, order=c(2,1,0), seasonal=list(order=c(1,0,0)),period = 12)) #aic = 345.67
fit4 <- arima(c, order=c(2,1,0), seasonal=list(order=c(0,0,1)),period = 12)) #aic = 349.64
fit3 <- arima(c, order=c(2,1,0), seasonal=list(order=c(1,0,0)),period = 12) #aic = 345.67
fit4 <- arima(c, order=c(2,1,0), seasonal=list(order=c(0,0,1)),period = 12) #aic = 349.64
fit3 <- arima(c, order=c(2,1,0), seasonal=list(order=c(1,0,0),period = 12)) #aic = 345.67
fit4 <- arima(c, order=c(2,1,0), seasonal=list(order=c(0,0,1),period = 12)) #aic = 349.64
fit3
auto.arima(c)
fit5 <- arima(c, order=c(2,1,1), seasonal=list(order=c(0,0,1),period = 12))
fit5
fit3
u = astsa::unemp
u
ts.plot(u)
acf(u,100)
pacf(u,100)
su = diff(u,12)
ts.plot(su)
du = diff(u)
ts.plot(du)
ts.plot(du)
ts.plot(du)
acf(du,100)
pacf(du,100)
##seasonal diff
sdu = diff(du)
ts.plot(sdu)
acf(sdu,100)
pacf(sdu,100)
##seasonal diff
sdu = diff(du,12)
ts.plot(sdu)
acf(sdu,100)
pacf(sdu,100)
su = diff(u,12)
ts.plot(su)
ts.plot(su)
du = diff(u)
ts.plot(su)
acf(su)
dsu = diff(su)
ts.plot(dsu)
ts.plot(dsu)
ts.plot(dsu)
acf(dsu)
pacf(u,100)
ts.plot(u)
acf(u,100)
pacf(u,100)
ts.plot(su)
acf(su)
pacf(su)
dsu = diff(su)
ts.plot(dsu)
acf(dsu)
pacf(dsu)
auto.arima(u)
fit1 <- arima(c, order=c(2,1,0), seasonal=list(order=c(2,1,1),period = 12))
fit1
fit1 <- arima(c, order=c(2,1,1), seasonal=list(order=c(2,1,1),period = 12))
fit1
fit2 <- arima(c, order=c(2,1,0), seasonal=list(order=c(2,1,1),period = 12))
fit3 <- arima(c, order=c(2,1,0), seasonal=list(order=c(1,1,1),period = 12))
fit2
fit3
fit1
fit3
fit2
fit2
setwd("D:/大四上/internship/中研院兼任研究助理/統計所/STAT_Tasks/k-sample")
#test data
a = c(1,2,3,4)
b = c(5,6,7,8)
c = c(1,1,1,1,2,2,2,2,2,3)
r = c(0.5,0.5,1)
data = list(a,b,c)
nboot = 1000
#theta function:
theta_func = function(s, t, TT, T12, WWeights, weights, ns, ns_sum, nn, H_hat){
#testing
# s = "s"
# t = "t"
# TT = data (T1,T2,T3)
# T12=T12
# WWeights = WWeights
# weights = weights
# ns = ns = c(n1,n2,n3....)
# ns = nj
# ns_sum = n
# nn = nn
# H_hat = H_hat
#####
# TT = data
#kk: kappa
kk = c()
for(i in 1:length(data)){
kk = c(kk,ns[i]/ns_sum)
}
theta_hat = 0
theta_hat_j = list()
if(s==t){
for(j in 1:length(data)){ #(t,t) #test j=3
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn,ns[j], byrow=FALSE)
denominator = matrix(rep((ns_sum * kk[j]^2 * weights[[j]]^2),nrow(Indicatorf)),nrow(Indicatorf),ns[j],byrow = TRUE)
theta_hat_temp = ((WWeights[j])^2) * ((Indicatorf-H_hat)^2)/denominator
theta_hat_temp_sum = apply(theta_hat_temp, 1, sum)
theta_hat_j[[j]] = theta_hat_temp_sum
theta_hat = theta_hat + theta_hat_temp_sum
}
return(list(theta_hat=theta_hat,theta_hat_j=theta_hat_j))
}else{ #(s,t)or(t,s)
matrix_temp = list()
for(i in 1:length(data)){
matrix_temp[[i]] = matrix(rep(NA,(nn)*(nn)),nn,nn)
}
for(j in 1:length(data)){ #j=3
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn, ns[j], byrow=FALSE)
s_matrix = Indicatorf - H_hat
t_matrix = Indicatorf - H_hat
WW = WWeights[j]^2
denominator = ns_sum * kk[j]^2 * weights[[j]]^2
for(t in 2:(nn)){ #t=2
for(s in 1:(t)){ #s=1
sum_n = 0
theta_hat_temp = c()
nj_vec = c()
for(ns_temp in 1:ns[j]){ #ns_temp=3
nj_temp = WW * s_matrix[s,ns_temp] * t_matrix[t,ns_temp] / denominator[ns_temp]
nj_vec = c(nj_vec,nj_temp)
}
matrix_temp[[j]][s,t] = sum(nj_vec)
}
}
theta_hat = Reduce("+", matrix_temp)
}
return(list(theta_hat=theta_hat,theta_hat_j=matrix_temp))
}
}
#cov function:
COV_func = function(data, mean, ns, nn){
###test
# data = dinominater_n1_data
# mean = dinominater_n1_data_mean
# ns = n1
# nn = nn
###
matrix_temp = matrix(rep(NA,(nn)*(nn)),nn,nn)
s_matrix = data - mean
t_matrix = data - mean
for(t in 2:(nn)){ #t=2
for(s in 1:(t)){ #s=1
nj_vec = c()
for(ns_temp in 1:ns){ #ns_temp=3
nj_temp = s_matrix[s,ns_temp] * t_matrix[t,ns_temp]
nj_vec = c(nj_vec,nj_temp)
}
matrix_temp[s,t] = sum(nj_vec)
}
}
return(matrix_temp/ns)
}
### main function
# n = n1 + n2
# ns = c(n1,n2,n3)
# Tj = data[[j]]
# alldata = c(T1,T2,...)
alldata = c()
mindata = c()
ns = c()
cal = c()
weights = list()
WWeights = c()
for(i in 1:length(data)){
alldata = c(alldata,data[[i]])
mindata = c(mindata,min(data[[i]]))
ns = c(ns,length(data[[i]]))
cal = c(cal,rev(unique(sort(data[[i]])))[2])
weights[[i]] = data[[i]]^r[i]
WWeights = c(WWeights,ns[i]/(sum(1/weights[[i]])))
}
alldata
data
lapply(data,function(x)x^2)
lapply(data,function(x)x^r)
?lapply
n = sum(ns)
lower_bound = max(mindata)
upper_bound = min(cal)
T12_temp <- sort(unique(alldata))
nn_temp = length(T12_temp)
lowerbindx=(1:nn_temp)[abs(T12_temp-lower_bound)==min(abs(T12_temp-lower_bound))]
upperbindx=(1:nn_temp)[abs(T12_temp-upper_bound)==min(abs(T12_temp-upper_bound))]
T12 = T12_temp[lowerbindx:upperbindx]
nn = length(T12)
kappa = c()
p_hat = list()
ECDF = list()
H_hat = 0
for(i in 1:length(data)){
kappa = c(kappa,ns[i]/n)
p_hat[[i]] = WWeights[i]/(ns[i]*weights[[i]])
ECDF[[i]] = apply((matrix(rep(p_hat[[i]],nn), nn, ns[i], byrow=TRUE) * (matrix(rep(data[[i]],nn), nn, ns[i], byrow=TRUE) <= matrix(rep(T12,ns[i]), nn, ns[i], byrow=FALSE))), 1, sum)
H_hat = H_hat + ns[i]*ECDF[[i]]/n
}
dH_hatvec = c(0, H_hat)
theta_hat_t_t = theta_func("t","t",data,T12,WWeights,weights,ns,n,nn,H_hat)
theta_hat_s_t = theta_func("s","t",data,T12,WWeights,weights,ns,n,nn,H_hat)
theta_hat_s_t
k=2
j=1
cal = 0
for(i in 1:length(data)){
a11 = theta_hat_t_t$theta_hat_j[[i]]
a21 = theta_hat_s_t$theta_hat_j[[i]]
cal = cal + solve(matrix(c(a11[j], a21[j,k], a21[j,k], a22[k]),2,2)) #A2 second matrix inv
}
for(i in 1:length(data)){
a11 = theta_hat_t_t$theta_hat_j[[i]]
a21 = theta_hat_s_t$theta_hat_j[[i]]
a22 = a11
cal = cal + solve(matrix(c(a11[j], a21[j,k], a21[j,k], a22[k]),2,2)) #A2 second matrix inv
}
i=1
#i=1
a11 = theta_hat_t_t$theta_hat_j[[i]]
a21 = theta_hat_s_t$theta_hat_j[[i]]
a11
a21
a11
matrix(c(a11[j], a21[j,k], a21[j,k], a22[k]),2,2)
theta_hat_s_t$theta_hat
theta_hat_s_t$theta_hat_j
s = "s"
t = "t"
TT = data (T1,T2,T3)
TT = data
T12=T12
WWeights = WWeights
weights = weights
ns = ns
ns_sum = n
nn = nn
H_hat = H_hat
#kk: kappa
kk = c()
for(i in 1:length(data)){
kk = c(kk,ns[i]/ns_sum)
}
kk
matrix_temp = list()
for(i in 1:length(data)){
matrix_temp[[i]] = matrix(rep(NA,(nn)*(nn)),nn,nn)
}
matrix_temp
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn, ns[j], byrow=FALSE)
Indicatorf
s_matrix = Indicatorf - H_hat
s_matrix
t_matrix = Indicatorf - H_hat
WW = WWeights[j]^2
WW
denominator = ns_sum * kk[j]^2 * weights[[j]]^2
denominator
WW
t=2
s=1
nn
sum_n = 0
theta_hat_temp = c()
nj_vec = c()
ns[j]
for(ns_temp in 1:ns[j]){ #ns_temp=3
nj_temp = WW * s_matrix[s,ns_temp] * t_matrix[t,ns_temp] / denominator[ns_temp]
nj_vec = c(nj_vec,nj_temp)
}
nj_temp
nj_vec
matrix_temp[[j]][s,t] = sum(nj_vec)
matrix_temp[[j]][s,t]
sum(nj_vec)
s_matrix
[s,ns_temp]
matrix_temp = list()
for(i in 1:length(data)){
matrix_temp[[i]] = matrix(rep(NA,(nn)*(nn)),nn,nn)
}
for(j in 1:length(data)){ #j=3
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn, ns[j], byrow=FALSE)
s_matrix = Indicatorf - H_hat
t_matrix = Indicatorf - H_hat
WW = WWeights[j]^2
denominator = ns_sum * kk[j]^2 * weights[[j]]^2
for(t in 2:(nn)){ #t=2
for(s in 1:(t)){ #s=1
sum_n = 0
theta_hat_temp = c()
nj_vec = c()
for(ns_temp in 1:ns[j]){ #ns_temp=3
nj_temp = WW * s_matrix[s,ns_temp] * t_matrix[t,ns_temp] / denominator[ns_temp]
nj_vec = c(nj_vec,nj_temp)
}
matrix_temp[[j]][s,t] = sum(nj_vec)
}
}
print(matrix_temp)
theta_hat = Reduce("+", matrix_temp)
}
lapply(matrix, sum
1
lapply(matrix, sum)
lapply(matrix_temp, sum)
matrix_temp
matrix_temp[[1]]+matrix_temp[[2]]+matrix_temp[[3]]
Reduce("+", matrix_temp)
matrix_temp = list()
for(i in 1:length(data)){
matrix_temp[[i]] = matrix(rep(NA,(nn)*(nn)),nn,nn)
}
for(j in 1:length(data)){ #j=3
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn, ns[j], byrow=FALSE)
s_matrix = Indicatorf - H_hat
t_matrix = Indicatorf - H_hat
WW = WWeights[j]^2
denominator = ns_sum * kk[j]^2 * weights[[j]]^2
for(t in 2:(nn)){ #t=2
for(s in 1:(t)){ #s=1
sum_n = 0
theta_hat_temp = c()
nj_vec = c()
for(ns_temp in 1:ns[j]){ #ns_temp=3
nj_temp = WW * s_matrix[s,ns_temp] * t_matrix[t,ns_temp] / denominator[ns_temp]
nj_vec = c(nj_vec,nj_temp)
}
matrix_temp[[j]][s,t] = sum(nj_vec)
print(matrix_temp)
}
}
#print(matrix_temp)
theta_hat = Reduce("+", matrix_temp)
}
for(j in 1:length(data)){ #(t,t) #test j=3
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn,ns[j], byrow=FALSE)
denominator = matrix(rep((ns_sum * kk[j]^2 * weights[[j]]^2),nrow(Indicatorf)),nrow(Indicatorf),ns[j],byrow = TRUE)
theta_hat_temp = ((WWeights[j])^2) * ((Indicatorf-H_hat)^2)/denominator
theta_hat_temp_sum = apply(theta_hat_temp, 1, sum)
theta_hat_j[[j]] = theta_hat_temp_sum
theta_hat = theta_hat + theta_hat_temp_sum
}
theta_hat = 0
theta_hat_j = list()
theta_hat = 0
theta_hat_j = list()
for(j in 1:length(data)){ #(t,t) #test j=3
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn,ns[j], byrow=FALSE)
denominator = matrix(rep((ns_sum * kk[j]^2 * weights[[j]]^2),nrow(Indicatorf)),nrow(Indicatorf),ns[j],byrow = TRUE)
theta_hat_temp = ((WWeights[j])^2) * ((Indicatorf-H_hat)^2)/denominator
theta_hat_temp_sum = apply(theta_hat_temp, 1, sum)
theta_hat_j[[j]] = theta_hat_temp_sum
theta_hat = theta_hat + theta_hat_temp_sum
}
theta_hat_j
denominator
Indicatorf
rep((ns_sum * kk[j]^2 * weights[[j]]^2),nrow(Indicatorf))
(ns_sum * kk[j]^2 * weights[[j]]^2)
nrow(Indicatorf)
nrow(Indicatorf)
ns[j]
WWeights[j])^2
(WWeights[j])^2)
(WWeights[j])^2
Indicatorf-H_hat
H_hat
Indicatorf
Indicatorf-H_hat
(Indicatorf-H_hat)^2
denominator
theta_hat_temp
theta_hat_temp_sum
j=1
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn,ns[j], byrow=FALSE)
denominator = matrix(rep((ns_sum * kk[j]^2 * weights[[j]]^2),nrow(Indicatorf)),nrow(Indicatorf),ns[j],byrow = TRUE)
theta_hat_temp = ((WWeights[j])^2) * ((Indicatorf-H_hat)^2)/denominator
theta_hat_temp_sum = apply(theta_hat_temp, 1, sum)
theta_hat_temp_sum
theta_hat_temp
theta_hat_temp_sum
matrix_temp
j=1
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn, ns[j], byrow=FALSE)
s_matrix = Indicatorf - H_hat
t_matrix = Indicatorf - H_hat
WW = WWeights[j]^2
denominator = ns_sum * kk[j]^2 * weights[[j]]^2
for(t in 2:(nn)){ #t=2
for(s in 1:(t)){ #s=1
sum_n = 0
theta_hat_temp = c()
nj_vec = c()
for(ns_temp in 1:ns[j]){ #ns_temp=3
nj_temp = WW * s_matrix[s,ns_temp] * t_matrix[t,ns_temp] / denominator[ns_temp]
nj_vec = c(nj_vec,nj_temp)
}
matrix_temp[[j]][s,t] = sum(nj_vec)
#print(matrix_temp)
}
}
matrix_temp
matrix_temp = list()
for(i in 1:length(data)){
matrix_temp[[i]] = matrix(rep(NA,(nn)*(nn)),nn,nn)
}
Indicatorf = matrix(rep(TT[[j]],nn), nn, ns[j], byrow=TRUE) <= matrix(rep(T12,ns[j]), nn, ns[j], byrow=FALSE)
s_matrix = Indicatorf - H_hat
t_matrix = Indicatorf - H_hat
WW = WWeights[j]^2
denominator = ns_sum * kk[j]^2 * weights[[j]]^2
for(t in 2:(nn)){ #t=2
for(s in 1:(t)){ #s=1
sum_n = 0
theta_hat_temp = c()
nj_vec = c()
for(ns_temp in 1:ns[j]){ #ns_temp=3
nj_temp = WW * s_matrix[s,ns_temp] * t_matrix[t,ns_temp] / denominator[ns_temp]
nj_vec = c(nj_vec,nj_temp)
}
matrix_temp[[j]][s,t] = sum(nj_vec)
#print(matrix_temp)
}
}
matrix_temp
nj_temp = WW * s_matrix[s,ns_temp] * t_matrix[t,ns_temp] / denominator[ns_temp]
nj_temp
sum_n = 0
theta_hat_temp = c()
nj_vec = c()
t=2
s=1
for(ns_temp in 1:ns[j]){ #ns_temp=3
nj_temp = WW * s_matrix[s,ns_temp] * t_matrix[t,ns_temp] / denominator[ns_temp]
nj_vec = c(nj_vec,nj_temp)
}
nj_vec
denominator
nj_vec
sum(nj_vec)
